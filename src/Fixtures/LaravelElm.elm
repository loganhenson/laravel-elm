port module LaravelElm exposing (Errors, page, receiveNewProps, updateComponent)

-- Do not edit this file manually.

import Browser
import Dict exposing (Dict)
import Html exposing (Html, pre, text)
import Json.Decode exposing (Decoder, Error, decodeValue, errorToString)
import Json.Encode exposing (Value)


port receiveNewProps : (Value -> msg) -> Sub msg


type alias Errors =
    Dict String (List String)


page :
    { decodeProps : Decoder props
    , stateFromProps : props -> state
    , view : { props : props, state : state } -> Html msg
    , update : msg -> { props : props, state : state } -> ( { props : props, state : state }, Cmd msg )
    , subscriptions : Result Error { props : props, state : state } -> Sub msg
    }
    -> Program Value (Result Error { props : props, state : state }) msg
page { decodeProps, stateFromProps, view, update, subscriptions } =
    Browser.element
        { init =
            \json ->
                let
                    decodedProps =
                        decodeValue decodeProps json
                in
                case decodedProps of
                    Ok props ->
                        ( Ok { props = props, state = stateFromProps props }, Cmd.none )

                    Err error ->
                        ( Err error, Cmd.none )
        , view =
            \resultModel ->
                case resultModel of
                    Ok model ->
                        view model

                    Err error ->
                        pre [] [ text <| errorToString error ]
        , update =
            \msg resultModel ->
                case resultModel of
                    Ok model ->
                        let
                            ( newModel, cmd ) =
                                update msg model
                        in
                        ( Ok newModel, cmd )

                    Err error ->
                        ( Err error, Cmd.none )
        , subscriptions = subscriptions
        }


updateComponent :
    { componentMsg : componentMsg
    , componentUpdate : componentMsg -> componentModel -> ( componentModel, Cmd componentMsg )
    , componentModel : componentModel
    , pageComponentMsg : componentMsg -> pageMsg
    , setter : componentModel -> { props : props, state : state }
    }
    -> ( { props : props, state : state }, Cmd pageMsg )
updateComponent { componentMsg, componentUpdate, componentModel, pageComponentMsg, setter } =
    componentUpdate componentMsg componentModel
        |> Tuple.mapBoth setter (Cmd.map pageComponentMsg)
