port module LaravelElm exposing (handleNewProps, page, receiveNewProps)

-- Do not edit this file manually.

import Browser
import Html exposing (div, text)
import Json.Decode exposing (decodeValue)
import Json.Encode exposing (Value)


port receiveNewProps : (Value -> msg) -> Sub msg


type Msg
    = NewProps Value


page :
    { decodeProps : Json.Decode.Decoder props
    , stateFromProps : props -> state
    , view : { props : props, state : state } -> Html.Html msg
    , update : msg -> { props : props, state : state } -> ( { f | props : props, state : state }, Cmd msg )
    , subscriptions : { props : Result Json.Decode.Error props, state : Maybe state } -> Sub msg
    }
    -> Program Json.Decode.Value { props : Result Json.Decode.Error props, state : Maybe state } msg
page { decodeProps, stateFromProps, view, update, subscriptions } =
    Browser.element
        { init =
            \json ->
                let
                    decodedProps =
                        decodeValue decodeProps json
                in
                case decodedProps of
                    Ok props ->
                        ( { props = decodedProps, state = Just (stateFromProps props) }, Cmd.none )

                    Err error ->
                        let
                            _ =
                                Debug.log "Decoding error: " error
                        in
                        ( { props = decodedProps, state = Nothing }, Cmd.none )
        , view =
            \{ props, state } ->
                case props of
                    Ok p ->
                        case state of
                            Just s ->
                                view { props = p, state = s }

                            Nothing ->
                                div [] [ text "add stateFromProps" ]

                    Err error ->
                        let
                            _ =
                                Debug.log "Error: " error
                        in
                        div [] [ text "Something went wrong." ]
        , update =
            \msg { props, state } ->
                case props of
                    Ok p ->
                        case state of
                            Just s ->
                                let
                                    ( newModel, cmd ) =
                                        update msg { props = p, state = s }
                                in
                                ( { props = Ok newModel.props, state = Just newModel.state }, cmd )

                            Nothing ->
                                ( { props = props, state = Nothing }, Cmd.none )

                    Err error ->
                        ( { props = Err error, state = state }, Cmd.none )
        , subscriptions = subscriptions
        }


handleNewProps : { decodeProps : Json.Decode.Decoder props, previousProps : props, newProps : Json.Decode.Value } -> props
handleNewProps { decodeProps, previousProps, newProps } =
    case decodeValue decodeProps newProps of
        Ok decodedProps ->
            decodedProps

        Err error ->
            let
                _ =
                    Debug.log "Decoding Error:" error
            in
            previousProps
